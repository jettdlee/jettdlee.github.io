{"version":3,"sources":["components/Navbar.js","components/MainPage.js","components/About.js","components/Experience.js","components/Portfolio.js","components/Contact.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","id","React","Component","MainPage","src","alt","About","Experience","Portfolio","Contact","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVAoBeA,G,6KAfX,OACE,yBAAKC,UAAU,SAASC,GAAG,eACzB,yBAAKD,UAAU,IACb,wBAAIA,UAAU,iCACZ,wBAAIA,UAAU,oBAAd,SACA,wBAAIA,UAAU,oBAAd,cACA,wBAAIA,UAAU,oBAAd,aACA,wBAAIA,UAAU,oBAAd,kB,GATSE,IAAMC,YCyBZC,G,6KAvBX,OACE,4BAAQJ,UAAU,cAChB,yBAAKA,UAAU,eACb,yBAAKA,UAAU,6DACb,yBAAKA,UAAU,cAAcK,IAAI,qBAAqBC,IAAI,KAC1D,yBAAKN,UAAU,YACb,wBAAIA,UAAU,WAAd,oBAKJ,yBAAKA,UAAU,cACb,iDACA,4CACA,+CACA,mD,GAjBWE,IAAMC,YCOdI,E,uKANX,OACE,0C,GAHcL,IAAMC,WCQXK,E,uKANX,OACE,+C,GAHmBN,IAAMC,WCQhBM,E,uKANX,OACE,8C,GAHkBP,IAAMC,WCQfO,E,uKANX,OACE,4C,GAHgBR,IAAMC,WCQbQ,E,uKANX,OACE,2C,GAHeT,IAAMC,WC4BZS,G,YAhBH,kBACV,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,cAAcC,UAAWP,IACrC,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWN,IACpC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,MAGtC,kBAAC,EAAD,SCdgBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.571ccbe7.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Navbar.css';\n\nclass Navbar extends React.Component {\n  render() {\n    return(\n      <nav className=\"navbar\" id=\"main_navbar\">\n        <div className=\"\">\n          <ul className=\"navbar-ul horizontal flex-row\">\n            <li className=\"navbar-list-item\">About</li>\n            <li className=\"navbar-list-item\">Experience</li>\n            <li className=\"navbar-list-item\">Portfolio</li>\n            <li className=\"navbar-list-item\">Contact</li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport '../styles/MainPage.css';\n\nclass MainPage extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <div className=\"flex-column\">\n          <div className=\"d-flex flex-row align-items-center justify-content-center\">\n            <img className=\"avatar-logo\" src=\"/images/avatar.svg\" alt=\"\" />\n            <div className=\"headings\">\n              <h1 className='heading'>\n                Hello, I'm Jet\n              </h1>\n            </div>\n          </div>\n          <div className='sub-header'>\n            <p>Back-end Developer</p>\n            <p>Ruby on Rails</p>\n            <p>Machine Learning</p>\n            <p>Ex-Accountant</p>\n          </div>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default MainPage;\n","import React from 'react';\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div>About</div>\n    )\n  }\n}\n\nexport default About;\n","import React from 'react';\n\nclass Experience extends React.Component {\n  render() {\n    return (\n      <div>Experience</div>\n    )\n  }\n}\n\nexport default Experience;\n","import React from 'react';\n\nclass Portfolio extends React.Component {\n  render() {\n    return (\n      <div>Portfolio</div>\n    )\n  }\n}\n\nexport default Portfolio;\n","import React from 'react';\n\nclass Contact extends React.Component {\n  render() {\n    return (\n      <div>Contact</div>\n    )\n  }\n}\n\nexport default Contact;\n","import React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>Footer</div>\n    )\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/Navbar';\nimport MainPage from './components/MainPage';\nimport About from './components/About';\nimport Experience from './components/Experience';\nimport Portfolio from './components/Portfolio';\nimport Contact from './components/Contact';\nimport Footer from './components/Footer';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <Navbar />\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={MainPage} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/experience\" component={Experience} />\n        <Route path=\"/portfolio\" component={Portfolio} />\n        <Route path=\"/contact\" component={Contact} />\n      </Switch>\n    </BrowserRouter>\n    <Footer />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}